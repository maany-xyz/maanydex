// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: maany/genesismint/v1/genesismint.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v8/modules/core/23-commitment/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params: what the consumer expects for provider+denoms
type Params struct {
	ProviderClientId     string `protobuf:"bytes,1,opt,name=provider_client_id,json=providerClientId,proto3" json:"provider_client_id,omitempty" yaml:"provider_client_id"`
	ProviderChainId      string `protobuf:"bytes,2,opt,name=provider_chain_id,json=providerChainId,proto3" json:"provider_chain_id,omitempty" yaml:"provider_chain_id"`
	AllowedProviderDenom string `protobuf:"bytes,3,opt,name=allowed_provider_denom,json=allowedProviderDenom,proto3" json:"allowed_provider_denom,omitempty" yaml:"allowed_provider_denom"`
	MintDenom            string `protobuf:"bytes,4,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty" yaml:"mint_denom"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_a08cfa38e3b6bdc3, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetProviderClientId() string {
	if m != nil {
		return m.ProviderClientId
	}
	return ""
}

func (m *Params) GetProviderChainId() string {
	if m != nil {
		return m.ProviderChainId
	}
	return ""
}

func (m *Params) GetAllowedProviderDenom() string {
	if m != nil {
		return m.AllowedProviderDenom
	}
	return ""
}

func (m *Params) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

// A single mint instruction proven against provider state
type MintIntent struct {
	MerkleProof               *types.MerkleProof `protobuf:"bytes,1,opt,name=merkle_proof,json=merkleProof,proto3" json:"merkle_proof,omitempty"`
	ProofHeightRevisionNumber uint64             `protobuf:"varint,2,opt,name=proof_height_revision_number,json=proofHeightRevisionNumber,proto3" json:"proof_height_revision_number,omitempty"`
	ProofHeightRevisionHeight uint64             `protobuf:"varint,3,opt,name=proof_height_revision_height,json=proofHeightRevisionHeight,proto3" json:"proof_height_revision_height,omitempty"`
	// Key path pieces. First element must be the store name (e.g., "x-mintburn"),
	// second element is hex of the KV key bytes (e.g., "0131").
	KeyPath []string `protobuf:"bytes,4,rep,name=key_path,json=keyPath,proto3" json:"key_path,omitempty"`
	// Base64-encoded value (provider KV value for that key)
	Value           string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	ProviderChainId string `protobuf:"bytes,6,opt,name=provider_chain_id,json=providerChainId,proto3" json:"provider_chain_id,omitempty"`
	// Minting details (mirror)
	AmountDenom string `protobuf:"bytes,7,opt,name=amount_denom,json=amountDenom,proto3" json:"amount_denom,omitempty"`
	AmountValue string `protobuf:"bytes,8,opt,name=amount_value,json=amountValue,proto3" json:"amount_value,omitempty"`
	EscrowId    string `protobuf:"bytes,9,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty"`
	Recipient   string `protobuf:"bytes,10,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *MintIntent) Reset()         { *m = MintIntent{} }
func (m *MintIntent) String() string { return proto.CompactTextString(m) }
func (*MintIntent) ProtoMessage()    {}
func (*MintIntent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a08cfa38e3b6bdc3, []int{1}
}
func (m *MintIntent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintIntent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintIntent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintIntent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintIntent.Merge(m, src)
}
func (m *MintIntent) XXX_Size() int {
	return m.Size()
}
func (m *MintIntent) XXX_DiscardUnknown() {
	xxx_messageInfo_MintIntent.DiscardUnknown(m)
}

var xxx_messageInfo_MintIntent proto.InternalMessageInfo

func (m *MintIntent) GetMerkleProof() *types.MerkleProof {
	if m != nil {
		return m.MerkleProof
	}
	return nil
}

func (m *MintIntent) GetProofHeightRevisionNumber() uint64 {
	if m != nil {
		return m.ProofHeightRevisionNumber
	}
	return 0
}

func (m *MintIntent) GetProofHeightRevisionHeight() uint64 {
	if m != nil {
		return m.ProofHeightRevisionHeight
	}
	return 0
}

func (m *MintIntent) GetKeyPath() []string {
	if m != nil {
		return m.KeyPath
	}
	return nil
}

func (m *MintIntent) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *MintIntent) GetProviderChainId() string {
	if m != nil {
		return m.ProviderChainId
	}
	return ""
}

func (m *MintIntent) GetAmountDenom() string {
	if m != nil {
		return m.AmountDenom
	}
	return ""
}

func (m *MintIntent) GetAmountValue() string {
	if m != nil {
		return m.AmountValue
	}
	return ""
}

func (m *MintIntent) GetEscrowId() string {
	if m != nil {
		return m.EscrowId
	}
	return ""
}

func (m *MintIntent) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

// GenesisState accepts your bundle.json
type GenesisState struct {
	Params           *Params       `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	Mints            []*MintIntent `protobuf:"bytes,2,rep,name=mints,proto3" json:"mints,omitempty"`
	ClaimedEscrowIds []string      `protobuf:"bytes,3,rep,name=claimed_escrow_ids,json=claimedEscrowIds,proto3" json:"claimed_escrow_ids,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a08cfa38e3b6bdc3, []int{2}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *GenesisState) GetMints() []*MintIntent {
	if m != nil {
		return m.Mints
	}
	return nil
}

func (m *GenesisState) GetClaimedEscrowIds() []string {
	if m != nil {
		return m.ClaimedEscrowIds
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "maany.genesismint.v1.Params")
	proto.RegisterType((*MintIntent)(nil), "maany.genesismint.v1.MintIntent")
	proto.RegisterType((*GenesisState)(nil), "maany.genesismint.v1.GenesisState")
}

func init() {
	proto.RegisterFile("maany/genesismint/v1/genesismint.proto", fileDescriptor_a08cfa38e3b6bdc3)
}

var fileDescriptor_a08cfa38e3b6bdc3 = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0x9b, 0xa6, 0x4d, 0x9b, 0x49, 0xa5, 0xaf, 0x1d, 0xe5, 0x43, 0x4e, 0x49, 0x93, 0xd4,
	0x48, 0x50, 0x21, 0xb0, 0xd5, 0xd2, 0xb2, 0x60, 0x83, 0x54, 0xfe, 0x35, 0x42, 0x85, 0xc8, 0x48,
	0x20, 0xb1, 0xb1, 0x26, 0xf6, 0xd4, 0x19, 0xd5, 0xe3, 0x89, 0xec, 0x89, 0x5b, 0xf3, 0x14, 0x3c,
	0x07, 0x0b, 0x56, 0x3c, 0x04, 0xcb, 0x2e, 0x59, 0x45, 0xa8, 0x79, 0x83, 0x3c, 0x01, 0x9a, 0x3b,
	0x26, 0x0e, 0x34, 0xec, 0x7c, 0xce, 0xfd, 0xf9, 0x5c, 0xf9, 0xde, 0x19, 0xa3, 0xbb, 0x9c, 0x90,
	0x28, 0xb3, 0x03, 0x1a, 0xd1, 0x84, 0x25, 0x9c, 0x45, 0xd2, 0x4e, 0xf7, 0xe7, 0xa5, 0x35, 0x8c,
	0x85, 0x14, 0xb8, 0x0e, 0x9c, 0x35, 0x5f, 0x48, 0xf7, 0xb7, 0xeb, 0x81, 0x08, 0x04, 0x00, 0xb6,
	0x7a, 0xd2, 0xec, 0xf6, 0x3d, 0xd6, 0xf7, 0x6c, 0x4f, 0xc4, 0xd4, 0xf6, 0x04, 0xe7, 0x4c, 0x72,
	0xaa, 0x53, 0x0b, 0x95, 0x83, 0x8d, 0x40, 0x88, 0x20, 0xa4, 0x36, 0xa8, 0xfe, 0xe8, 0xcc, 0x56,
	0x2d, 0x40, 0x98, 0x5f, 0x97, 0x51, 0xa5, 0x47, 0x62, 0xc2, 0x13, 0xfc, 0x1a, 0xe1, 0x61, 0x2c,
	0x52, 0xe6, 0xd3, 0xd8, 0xf5, 0x42, 0x46, 0x23, 0xe9, 0x32, 0xdf, 0x28, 0x75, 0x4a, 0x7b, 0xd5,
	0xe3, 0x9d, 0xe9, 0xb8, 0xdd, 0xc8, 0x08, 0x0f, 0x9f, 0x98, 0x37, 0x19, 0xd3, 0xd9, 0xfc, 0x6d,
	0x3e, 0x03, 0xaf, 0xeb, 0xe3, 0x13, 0xb4, 0x55, 0x80, 0x03, 0xc2, 0x22, 0x95, 0xb5, 0x0c, 0x59,
	0xcd, 0xe9, 0xb8, 0x6d, 0xfc, 0x9d, 0x95, 0x23, 0xa6, 0xf3, 0xdf, 0x2c, 0x4a, 0x59, 0x5d, 0x1f,
	0x7f, 0x40, 0xb7, 0x48, 0x18, 0x8a, 0x0b, 0xea, 0xbb, 0x33, 0xdc, 0xa7, 0x91, 0xe0, 0x46, 0x19,
	0xe2, 0x76, 0xa7, 0xe3, 0xf6, 0x8e, 0x8e, 0x5b, 0xcc, 0x99, 0x4e, 0x3d, 0x2f, 0xf4, 0x72, 0xff,
	0xb9, 0xb2, 0xf1, 0x21, 0x42, 0x6a, 0xbe, 0x79, 0xd8, 0x0a, 0x84, 0xfd, 0x3f, 0x1d, 0xb7, 0xb7,
	0x74, 0x58, 0x51, 0x33, 0x9d, 0xaa, 0x12, 0xf0, 0x96, 0xf9, 0xad, 0x8c, 0xd0, 0x29, 0x8b, 0x64,
	0x37, 0x92, 0x34, 0x92, 0xf8, 0x25, 0xda, 0xe0, 0x34, 0x3e, 0x0f, 0xa9, 0x6a, 0x2a, 0xce, 0x60,
	0x5c, 0xb5, 0x83, 0x3b, 0x16, 0xeb, 0x7b, 0x96, 0x5a, 0x8d, 0x35, 0xb7, 0x8c, 0x74, 0xdf, 0x3a,
	0x05, 0xb6, 0xa7, 0x50, 0xa7, 0xc6, 0x0b, 0x81, 0x9f, 0xa2, 0x26, 0x04, 0xb8, 0x03, 0xca, 0x82,
	0x81, 0x74, 0x63, 0x9a, 0xb2, 0x84, 0x89, 0xc8, 0x8d, 0x46, 0xbc, 0x4f, 0x63, 0x18, 0xdd, 0x8a,
	0xd3, 0x00, 0xe6, 0x04, 0x10, 0x27, 0x27, 0xde, 0x00, 0xf0, 0xef, 0x00, 0xad, 0x61, 0x58, 0x8b,
	0x03, 0xb4, 0xc2, 0x0d, 0xb4, 0x7e, 0x4e, 0x33, 0x77, 0x48, 0xe4, 0xc0, 0x58, 0xe9, 0x94, 0xf7,
	0xaa, 0xce, 0xda, 0x39, 0xcd, 0x7a, 0x44, 0x0e, 0x70, 0x1d, 0xad, 0xa6, 0x24, 0x1c, 0x51, 0x63,
	0x55, 0x0d, 0xc9, 0xd1, 0x02, 0xdf, 0x5f, 0xb4, 0xe2, 0x0a, 0x10, 0x37, 0x96, 0xb8, 0x8b, 0x36,
	0x08, 0x17, 0xa3, 0xd9, 0xb4, 0xd7, 0x00, 0xab, 0x69, 0x4f, 0xaf, 0xa3, 0x40, 0x74, 0xaf, 0xf5,
	0x79, 0xe4, 0x3d, 0x74, 0xbc, 0x8d, 0xaa, 0x34, 0xf1, 0x62, 0x71, 0xa1, 0x3a, 0x55, 0xa1, 0xbe,
	0xae, 0x8d, 0xae, 0x8f, 0x9b, 0xa8, 0x1a, 0x53, 0x8f, 0x0d, 0xd5, 0x01, 0x34, 0x10, 0x14, 0x0b,
	0xc3, 0xfc, 0x52, 0x42, 0x1b, 0xaf, 0xf4, 0xa5, 0x7a, 0x27, 0x89, 0xa4, 0xf8, 0x10, 0x55, 0x86,
	0x70, 0xee, 0xf3, 0x95, 0x35, 0xad, 0x45, 0x37, 0xcf, 0xd2, 0x77, 0xc3, 0xc9, 0x59, 0xfc, 0x18,
	0xad, 0xaa, 0x4a, 0x62, 0x2c, 0x77, 0xca, 0x7b, 0xb5, 0x83, 0xce, 0xe2, 0x97, 0x8a, 0xf3, 0xe1,
	0x68, 0x1c, 0x3f, 0x40, 0xd8, 0x0b, 0x09, 0xe3, 0xd4, 0x77, 0x67, 0x5f, 0x90, 0x18, 0x65, 0x18,
	0xf3, 0x66, 0x5e, 0x79, 0x91, 0x7f, 0x49, 0x72, 0xfc, 0xf6, 0xfb, 0x75, 0xab, 0x74, 0x75, 0xdd,
	0x2a, 0xfd, 0xbc, 0x6e, 0x95, 0x3e, 0x4f, 0x5a, 0x4b, 0x57, 0x93, 0xd6, 0xd2, 0x8f, 0x49, 0x6b,
	0xe9, 0xe3, 0x51, 0xc0, 0xe4, 0x60, 0xd4, 0x57, 0xa7, 0xca, 0x86, 0xd6, 0x0f, 0x2f, 0xb3, 0x4f,
	0xf9, 0x93, 0x4f, 0x2f, 0xed, 0xf4, 0xc8, 0xbe, 0xfc, 0xe3, 0x27, 0x23, 0xb3, 0x21, 0x4d, 0xfa,
	0x15, 0xb8, 0xec, 0x8f, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x70, 0x34, 0x12, 0xf1, 0x86, 0x04,
	0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintGenesismint(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AllowedProviderDenom) > 0 {
		i -= len(m.AllowedProviderDenom)
		copy(dAtA[i:], m.AllowedProviderDenom)
		i = encodeVarintGenesismint(dAtA, i, uint64(len(m.AllowedProviderDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProviderChainId) > 0 {
		i -= len(m.ProviderChainId)
		copy(dAtA[i:], m.ProviderChainId)
		i = encodeVarintGenesismint(dAtA, i, uint64(len(m.ProviderChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderClientId) > 0 {
		i -= len(m.ProviderClientId)
		copy(dAtA[i:], m.ProviderClientId)
		i = encodeVarintGenesismint(dAtA, i, uint64(len(m.ProviderClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MintIntent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintIntent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintIntent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintGenesismint(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.EscrowId) > 0 {
		i -= len(m.EscrowId)
		copy(dAtA[i:], m.EscrowId)
		i = encodeVarintGenesismint(dAtA, i, uint64(len(m.EscrowId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AmountValue) > 0 {
		i -= len(m.AmountValue)
		copy(dAtA[i:], m.AmountValue)
		i = encodeVarintGenesismint(dAtA, i, uint64(len(m.AmountValue)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AmountDenom) > 0 {
		i -= len(m.AmountDenom)
		copy(dAtA[i:], m.AmountDenom)
		i = encodeVarintGenesismint(dAtA, i, uint64(len(m.AmountDenom)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ProviderChainId) > 0 {
		i -= len(m.ProviderChainId)
		copy(dAtA[i:], m.ProviderChainId)
		i = encodeVarintGenesismint(dAtA, i, uint64(len(m.ProviderChainId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintGenesismint(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.KeyPath) > 0 {
		for iNdEx := len(m.KeyPath) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyPath[iNdEx])
			copy(dAtA[i:], m.KeyPath[iNdEx])
			i = encodeVarintGenesismint(dAtA, i, uint64(len(m.KeyPath[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ProofHeightRevisionHeight != 0 {
		i = encodeVarintGenesismint(dAtA, i, uint64(m.ProofHeightRevisionHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.ProofHeightRevisionNumber != 0 {
		i = encodeVarintGenesismint(dAtA, i, uint64(m.ProofHeightRevisionNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.MerkleProof != nil {
		{
			size, err := m.MerkleProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesismint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedEscrowIds) > 0 {
		for iNdEx := len(m.ClaimedEscrowIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClaimedEscrowIds[iNdEx])
			copy(dAtA[i:], m.ClaimedEscrowIds[iNdEx])
			i = encodeVarintGenesismint(dAtA, i, uint64(len(m.ClaimedEscrowIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Mints) > 0 {
		for iNdEx := len(m.Mints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesismint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesismint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesismint(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesismint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderClientId)
	if l > 0 {
		n += 1 + l + sovGenesismint(uint64(l))
	}
	l = len(m.ProviderChainId)
	if l > 0 {
		n += 1 + l + sovGenesismint(uint64(l))
	}
	l = len(m.AllowedProviderDenom)
	if l > 0 {
		n += 1 + l + sovGenesismint(uint64(l))
	}
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovGenesismint(uint64(l))
	}
	return n
}

func (m *MintIntent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MerkleProof != nil {
		l = m.MerkleProof.Size()
		n += 1 + l + sovGenesismint(uint64(l))
	}
	if m.ProofHeightRevisionNumber != 0 {
		n += 1 + sovGenesismint(uint64(m.ProofHeightRevisionNumber))
	}
	if m.ProofHeightRevisionHeight != 0 {
		n += 1 + sovGenesismint(uint64(m.ProofHeightRevisionHeight))
	}
	if len(m.KeyPath) > 0 {
		for _, s := range m.KeyPath {
			l = len(s)
			n += 1 + l + sovGenesismint(uint64(l))
		}
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovGenesismint(uint64(l))
	}
	l = len(m.ProviderChainId)
	if l > 0 {
		n += 1 + l + sovGenesismint(uint64(l))
	}
	l = len(m.AmountDenom)
	if l > 0 {
		n += 1 + l + sovGenesismint(uint64(l))
	}
	l = len(m.AmountValue)
	if l > 0 {
		n += 1 + l + sovGenesismint(uint64(l))
	}
	l = len(m.EscrowId)
	if l > 0 {
		n += 1 + l + sovGenesismint(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovGenesismint(uint64(l))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovGenesismint(uint64(l))
	}
	if len(m.Mints) > 0 {
		for _, e := range m.Mints {
			l = e.Size()
			n += 1 + l + sovGenesismint(uint64(l))
		}
	}
	if len(m.ClaimedEscrowIds) > 0 {
		for _, s := range m.ClaimedEscrowIds {
			l = len(s)
			n += 1 + l + sovGenesismint(uint64(l))
		}
	}
	return n
}

func sovGenesismint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesismint(x uint64) (n int) {
	return sovGenesismint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesismint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedProviderDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedProviderDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesismint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesismint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintIntent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesismint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintIntent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintIntent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MerkleProof == nil {
				m.MerkleProof = &types.MerkleProof{}
			}
			if err := m.MerkleProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeightRevisionNumber", wireType)
			}
			m.ProofHeightRevisionNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofHeightRevisionNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeightRevisionHeight", wireType)
			}
			m.ProofHeightRevisionHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofHeightRevisionHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPath = append(m.KeyPath, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesismint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesismint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesismint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mints = append(m.Mints, &MintIntent{})
			if err := m.Mints[len(m.Mints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedEscrowIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesismint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesismint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedEscrowIds = append(m.ClaimedEscrowIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesismint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesismint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesismint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesismint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesismint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesismint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesismint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesismint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesismint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesismint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesismint = fmt.Errorf("proto: unexpected end of group")
)
